add:
        name: Add
        categories: ["/NumPy/Arithmetic", "/Math/NumPy"]
        class: NToOneBlock
        blockType: [all]
        description: "Add arguments element-wise."
        keywords: [add, sum, addition, math, arithmetic, plus]
        skipExecTest: true

multiply:
        copy: add
        name: Multiply
        blockType: [all]
        description: "Multiply arguments element-wise."
        keywords: [multiply, product, multiplication, math, arithmetic]
        skipExecTest: true

#ldexp:
#        copy: add
#        name: LdExp
#        niceName: "x1 * 2**x2"

subtract:
        name: Subtract
        categories: ["/NumPy/Arithmetic", "/Math/NumPy"]
        class: TwoToOneBlock
        blockType: [all]
        description: "Subtract arguments, element-wise."
        keywords: [subtract, difference, minus, math, arithmetic]
        skipExecTest: true

divide:
        copy: subtract
        name: Divide
        blockType: [float, complex]
        description: "Returns a true division of the inputs, element-wise.

Instead of the Python traditional 'floor division', this returns a true division. True division adjusts the output type to present the best answer, regardless of input types."
        keywords: [divide, quotient, division, math, arithmetic]
        skipExecTest: true

true_divide:
        copy: subtract
        name: TrueDivide
        niceName: "True Divide"
        blockType: [float, complex]
        description: "Returns a true division of the inputs, element-wise.

Instead of the Python traditional 'floor division', this returns a true division. True division adjusts the output type to present the best answer, regardless of input types."
        keywords: [divide, quotient, division, math, arithmetic]
        skipExecTest: true

floor_divide:
        copy: subtract
        name: FloorDivide
        niceName: "Floor Divide"
        blockType: [float]
        description: "Return the largest integer smaller or equal to the division of the inputs.

It is equivalent to the Python // operator and pairs with the Python % (remainder), function so that <b>a = a % b + b * (a // b)</b> up to roundoff."
        keywords: [divide, quotient, division, math, arithmetic]
        skipExecTest: true

remainder:
        copy: subtract
        name: Mod
        niceName: Remainder
        blockType: [int, uint, float]
        alias: [mod]
        description: "Return element-wise remainder of division.

Computes the remainder complementary to the <b>/numpy/floor_divide</b> block. It is equivalent to the Python modulus operator <b>x1 % x2</b> and has the same sign as the divisor x2. The MATLAB function equivalent to <b>/numpy/remainder</b> is <b>mod</b>."
        keywords: [divide, remainder, division, math, arithmetic]
        skipExecTest: true

fmod:
        copy: subtract
        name: FMod
        blockType: [int, uint, float]
        description: "Return the element-wise remainder of division.

This is the NumPy implementation of the C library function <b>fmod</b>, the remainder has the same sign as the dividend <b>x1</b>. It is equivalent to the Matlab(TM) <b>rem</b> function and should not be confused with the Python modulus operator <b>x1 % x2</b>."
        keywords: [divide, remainder, division, math, arithmetic]
        skipExecTest: true

reciprocal:
        name: Reciprocal
        categories: ["/NumPy/Arithmetic", "/Math/NumPy"]
        class: OneToOneBlock
        blockType: [float, complex]
        description: "Return the reciprocal of the argument, element-wise.

Calculates <b>1/x</b>."
        keywords: [reciprocal, math, arithmetic]

sqrt:
        copy: reciprocal
        name: SqRt
        niceName: Square Root
        description: "Return the non-negative square-root of an array, element-wise."
        keywords: [square, root, math, arithmetic]
        skipExecTest: true

cbrt:
        name: CbRt
        copy: reciprocal
        blockType: [float]
        niceName: Cube Root
        description: "Return the cube-root of an array, element-wise."
        keywords: [cube, root, math, arithmetic]
        skipExecTest: true

square:
        name: Square
        copy: reciprocal
        blockType: [all]
        description: "Return the element-wise square of the input."
        keywords: [square, math, arithmetic]
        skipExecTest: true

absolute:
        name: Absolute
        copy: reciprocal
        blockType: [float, int]
        description: "Calculate the absolute value element-wise."
        alias: [abs]
        keywords: [absolute, value, math, arithmetic]
        skipExecTest: true

fabs:
        name: FAbs
        copy: reciprocal
        blockType: [float]
        description: "Compute the absolute values element-wise.

This function returns the absolute values (positive magnitude) of the data in x. Complex values are not handled, use <b>/numpy/absolute</b> to find the absolute values of complex data."
        keywords: [absolute, value, math, arithmetic]
        skipExecTest: true
