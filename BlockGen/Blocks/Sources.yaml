ones:
        name: Ones
        class: SingleOutputSource
        categories: ["/NumPy/Sources", "/Sources/NumPy"]
        blockType: [all]
        description: "Return a new array of given shape and type, filled with ones."
        keywords: [constant]

zeros:
        name: Zeros
        copy: ones
        description: "Return a new array of given shape and type, filled with zeros."
        keywords: [constant]

full:
        name: Full
        copy: ones
        subclass: True
        description: "Return a new array of given shape and type, filled with <b>fillValue</b>."
        funcArgs:
                - {name: fillValue, dtype: blockType, testValue1: 0, testValue2: 1}
        keywords: [constant]

arange:
        name: ARange
        copy: ones
        class: FixedSingleOutputSource
        subclass: True
        blockType: [int, uint, float]
        kwargs: [useDType=False, callPostBuffer=True, useShape=False]
        description: "Return evenly spaced values within a given interval.

Values are generated within the half-open interval <b>[start, stop)</b> (in other words, the interval including start but excluding stop). For integral dtypes, this block will throw an exception if the given parameters result in non-integral values.

When using a non-integer step, such as <b>0.1</b>, the results will often not be consistent. It is better to use <b>/blocks/numpy/linspace</b> for these cases."
        funcArgs:
                - {name: start, dtype: blockType, default: 1, testValue1: 10, testValue2: 20,
                   addedValidation:
                   ["Utility.errorForUnevenIntegralSpace(self.func, start, self.__stop, self.__step, self.numpyOutputDType)"]}
                - {name: stop, dtype: blockType, default: 10, testValue1: 20, testValue2: 10,
                   addedValidation:
                   ["Utility.errorForUnevenIntegralSpace(self.func, self.__start, stop, self.__step, self.numpyOutputDType)"]}
                - {name: step, dtype: blockType, default: 1, testValue1: 1, testValue2: 2}
        keywords: [range, interval, even]

linspace:
        name: LinSpace
        class: FixedSingleOutputSource
        subclass: True
        categories: ["/NumPy/Sources", "/Sources/NumPy"]
        blockType: [int, uint, float]
        kwargs: [useDType=True, callPostBuffer=True, useShape=False]
        description: "Return evenly spaced numbers over a specified interval.

Returns <b>numValues</b> evenly spaced samples, calculated over the interval <b>[start, stop]</b>. For integral dtypes, this block will throw an exception if the given parameters result in non-integral values."
        funcArgs:
                - {name: start, dtype: blockType, default: 1, testValue1: 10, testValue2: 2, badIntValues: [9], badUIntValues: [9],
                   addedValidation:
                   ["Utility.errorForUnevenIntegralSpace(self.func, start, self.__stop, self.__numValues, self.numpyOutputDType)"]}
                - {name: stop, dtype: blockType, default: 10, testValue1: 4, testValue2: 10, badIntValues: [11], badUIntValues: [11],
                   addedValidation:
                   ["Utility.errorForUnevenIntegralSpace(self.func, self.__start, stop, self.__numValues, self.numpyOutputDType)"]}
                - {name: numValues, dtype: uint, default: 10, testValue1: 3, testValue2: 4, ">": 0, badIntValues: [0, 5], badUIntValues: [0, 5],
                   addedValidation:
                   ["Utility.errorForUnevenIntegralSpace(self.func, self.__start, self.__stop, numValues, self.numpyOutputDType)"]}
        keywords: [range, interval, even]

geomspace:
        name: GeomSpace
        copy: linspace
        blockType: [float]
        description: "Return numbers spaced evenly on a log scale (a geometric progression).

This is similar to <b>/blocks/numpy/logspace</b>, but with endpoints specified directly. Each output sample is a constant multiple of the previous."
        funcArgs:
                - {name: start, dtype: blockType, default: 1, testValue1: 10, testValue2: 2}
                - {name: stop, dtype: blockType, default: 1000, testValue1: 4, testValue2: 10}
                - {name: numValues, dtype: uint, default: 4, testValue1: 3, testValue2: 4, ">": 0, badValues: [0]}
        keywords: [range, interval, geometric]
