ptp:
        name: PTP
        nicename: Peak-to-Peak
        categories: ["/NumPy/Stats"]
        class: ForwardAndPostLabelBlock
        blockType: [all]
        label: "PTP"
        kwargs: [useDType=False]
        description: "Calculates the peak-to-peak (maximum - minimum) of the input.

The input buffer is forwarded without copying, and the calculated PTP is posted under the label <b>\"PTP\"</b> at index 0."

mean:
        copy: ptp
        name: Mean
        label: "MEAN"
        nanFunc: nanmean
        description: "Compute the arithmetic mean.

The input buffer is forwarded without copying, and the calculated mean is posted under the label <b>\"MEAN\"</b> at index 0."

std:
        copy: ptp
        name: Std
        niceName: Standard Deviation
        label: "STD"
        nanFunc: nanstd
        description: "Compute the standard deviation, a measure of the spread of a distribution, of the array elements.

The input buffer is forwarded without copying, and the calculated standard deviation is posted under the label <b>\"STD\"</b> at index 0."

var:
        copy: ptp
        name: Var
        niceName: Variance
        label: "VAR"
        nanFunc: nanvar
        description: "Compute the variance, a measure of the spread of a distribution, of the array elements.

The input buffer is forwarded without copying, and the calculated variance is posted under the label <b>\"VAR\"</b> at index 0."

max:
        copy: ptp
        categories: ["/NumPy/Stats", "/Stream/NumPy"]
        name: Max
        findIndexFunc: (numpy.nanargmax if ignoreNaN else numpy.argmax)
        label: "MAX"
        alias: [amax]
        nanFunc: nanmax
        description: "Compute the maximum of all values in the given array.

The input buffer is forwarded without copying, and the calculated value is posted under the label \"MAX\" at the index of the max value."

min:
        copy: ptp
        name: Min
        categories: ["/NumPy/Stats", "/Stream/NumPy"]
        findIndexFunc: (numpy.nanargmin if ignoreNaN else numpy.argmin)
        label: "MIN"
        alias: [amin]
        nanFunc: nanmin
        description: "Compute the minimum of all values in the given array.

The input buffer is forwarded without copying, and the calculated value is posted under the label \"MIN\" at the index of the min value."

count_nonzero:
        copy: ptp
        categories: ["/NumPy/Stats", "/Stream/NumPy"]
        name: CountNonZero
        niceName: Count Non-Zeros
        label: "NONZERO"
        description: "Counts the number of non-zero values in the array.

The input buffer is forwarded without copying, and the calculated value is posted under the label <b>\"NONZERO\"</b> at index 0."

convolve:
        name: Convolve
        class: TwoToOneBlock
        subclass: True
        categories: ["/NumPy/Stats", "/Stream/NumPy"]
        blockType: [float,complex]
        kwargs: [useDType=False,callPostBuffer=True]
        funcArgs:
                - {name: mode, dtype: str, validValues: ["FULL", "VALID", "SAME"], badValues: ["full", "valid", "same"], storeParamLowercase: True}

correlate:
        copy: convolve
        name: Correlate
