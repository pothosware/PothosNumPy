unique:
        name: Unique
        class: OneToOneBlock
        categories: ["/NumPy/Stream", "/Stream/NumPy"]
        blockType: [all]
        skipExecTest: true 
        kwargs: [useDType=False, callPostBuffer=True]
        description: "Returns the sorted unique elements of an array."

copysign:
        name: CopySign
        niceName: Copy Sign
        class: TwoToOneBlock
        categories: ["/NumPy/Stream", "/Stream/NumPy"]
        blockType: [int, float]
        kwargs: [useDType=False]
        description: "Change the sign of port 0 to that of port 1, element-wise."

positive:
        name: Positive
        class: OneToOneBlock
        categories: ["/NumPy/Stream", "/Stream/NumPy"]
        blockType: [int, float, complex]
        skipExecTest: true
        description: "Numeric positive, element-wise."

trim_zeros:
        copy: unique
        name: TrimZeros
        niceName: Trim Zeros
        description: "Trim the leading and/or trailing zeros from a 1-D array or sequence."
        keywords: [strip]

negative:
        copy: positive
        name: Negative
        skipExecTest: true
        description: "Numeric negative, element-wise."

ravel:
        copy: unique
        name: Ravel
        class: NToOneBlock
        kwargs: [useDType=False, callReduce=False, callPostBuffer=True]
        description: "Return a contiguous flattened array."
        keywords: [flat, merge]

union1d:
        copy: unique
        name: Union1D
        niceName: Set Union
        class: NToOneBlock
        kwargs: [useDType=False, callPostBuffer=True, callReduce=True]
        skipExecTest: True
        description: "Find the union of all input arrays."

sort:
        copy: unique
        name: Sort
        alias: [msort]
        description: "Copy a sorted copy of the array."

sort_complex:
        copy: unique
        name: SortComplex
        niceName: "Sort Complex"
        blockType: [complex]
        description: "Sort a complex array using the real part first, then the imaginary part."

flip:
        name: Flip
        class: OneToOneBlock
        categories: ["/NumPy/Stream", "/Stream/NumPy"]
        blockType: [all]
        kwargs: [useDType=False, callPostBuffer=True]
        funcKWargs:
                - {name: axis, isPublic: False, value: -1}
        description: "Reverse the order of elements in an array."

roll:
        name: Roll
        class: OneToOneBlock
        subclass: True
        categories: ["/NumPy/Stream", "/Stream/NumPy"]
        blockType: [all]
        kwargs: [useDType=False, callPostBuffer=True]
        funcArgs:
                - {name: shift, dtype: int, testValue1: 10, testValue2: 2}
        description: "Roll array elements.

Elements that roll beyond the last position are re-introduced at the first."
        keywords: [shift]

partition:
        name: Partition
        class: OneToOneBlock
        subclass: True
        categories: ["/NumPy/Stream", "/Stream/NumPy"]
        blockType: [all]
        kwargs: [useDType=False, callPostBuffer=True]
        funcArgs:
                - {name: index, dtype: uint, testValue1: 4, testValue2: 2}
        description: "Return a partitioned copy of the array.

Creates a copy of the array with its elements rearranged in such a way that the value of the element in position <b>index</b> is in the position it would be in a sorted array. All elements smaller than element <b>index</b> are moved before this element and all equal or greater are moved behind it. The ordering of the elements in the two partitions is undefined."

nan_to_num:
        name: NanToNum
        niceName: NaN to Num
        class: OneToOneBlock
        categories: ["/NumPy/Stream", "/Stream/NumPy"]
        blockType: [all]
        kwargs: [useDType=False]
        description: "Replace NaN with zero and infinity with large finite numbers."

#clip:
#        name: Clip
#        class: NToOneBlock
#        subclass: True
#        categories: ["/NumPy/Stream", "/Stream/NumPy"]
#        blockType: [all]
#        kwargs: [useDType=False]
#        funcArgs:
#                - {name: min, dtype: blockType, testValue1: 1, testValue2: 5, badValues: [6],
#                   addedValidation:
#                   ["Utility.errorForLeftGERight(min, self.__max)"]}
#                - {name: max, dtype: blockType, testValue1: 11, testValue2: 15, badValues: [0],
#                   addedValidation:
#                   ["Utility.errorForLeftGERight(self.__min, max)"]}
